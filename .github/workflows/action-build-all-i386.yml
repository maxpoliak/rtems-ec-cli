name: 'CI i386: Full testing cycle'

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types: [created]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  VERSION: unknown
  RTEMS_ARCH: i386
  RTEMS_BSP: pc386

jobs:
  build-all-components:
    name: 'CI i386: Build all'
    runs-on: ubuntu-latest
    steps:
      - name: 'Step 1: Clone the project repo'
        uses: actions/checkout@v2.3.5
        with:
          submodules: true
          fetch-depth: 0
      - name: 'Step 2: Install all packages'
        run: |
          sudo apt-get update
          sudo apt-get install -yy build-essential gcc g++ gdb git unzip pax bison flex texinfo unzip
          sudo apt-get install -yy python3-dev libncurses5-dev zlib1g-dev python-dev curl locales
          sudo apt-get clean all
      - name: 'Step 3: Generating locales'
        run: sudo localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
      - name: 'Step 4: Make preparations'
        run: |
          ./preparations.sh
          osversion=$(bash ./ci/ci-generate-version.sh rtems --arch ${{ env.RTEMS_ARCH }} --bsp ${{ env.RTEMS_BSP }})
          echo ${osversion}
          echo "::set-env name=VERSION::$osversion"
      - name: 'Step 5: Build cross-tools ${{ env.RTEMS_ARCH }}/${{ env.RTEMS_BSP }}'
        run: ./build.sh cross
      - name: 'Step 6: Build RTEMS ${{ env.VERSION }}'
        run: |
          ./build.sh rtems
          pversion=$(bash ./ci/ci-generate-version.sh --arch ${{ env.RTEMS_ARCH }} --bsp ${{ env.RTEMS_BSP }} --branch ${{ github.head_ref }})
          echo ${pversion}
          echo "::set-env name=VERSION::$pversion"
      - name: 'Step 7: Build application. Version : ${{ env.VERSION }}'
        run: ./build.sh
      - name: 'Step 8: Upload artifact: ${{ env.VERSION }}-exe-artifact'
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.VERSION }}-exe-artifact'
          path: ./*.exe
  creating-qemu-image:
    needs: build-all-components
    name: 'CI i386: Create the QEMU bootable disk image with RTEMS'
    runs-on: ubuntu-latest
    steps:
      - name: 'Step 1: Repo'
        uses: actions/checkout@v2.3.5
        with:
          submodules: true
          fetch-depth: 0
      - name: 'Step 2: Make preparations'
        run: |
          ./preparations.sh
          pversion=$(bash ./ci/ci-generate-version.sh --arch ${{ env.RTEMS_ARCH }} --bsp ${{ env.RTEMS_BSP }} --branch ${{ github.head_ref }})
          echo ${pversion}
          echo "::set-env name=VERSION::$pversion"
      - name: 'Step 3: Download artifact: ${{ env.VERSION }}-exe-artifact'
        uses: actions/download-artifact@v2
        with:
          name: '${{ env.VERSION }}-exe-artifact'
      - name: 'Step 4: Creating a new bootable image'
        run: |
          dd if=/dev/zero of=boot-disk.img bs=512 count=32130
          sudo ./ci/ci-create-boot-image.sh --file boot-disk.img
      - name: 'Step 5: Upload artifact: ${{ env.VERSION }}-boot-disk-img-artifact'
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.VERSION }}-boot-disk-img-artifact'
          path: boot-disk.img
  test-exe-on-qemu:
    needs: build-all-components
    name: 'CI i386: Run exe on QEMU'
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - name: 'Step 1: Checkout Repo'
        uses: actions/checkout@v2.3.5
        with:
          submodules: true
          fetch-depth: 0
      - name: 'Step 2: Make preparations'
        run: |
          ./preparations.sh
          pversion=$(bash ./ci/ci-generate-version.sh --arch ${{ env.RTEMS_ARCH }} --bsp ${{ env.RTEMS_BSP }} --branch ${{ github.head_ref }})
          echo ${pversion}
          echo "::set-env name=VERSION::$pversion"
      - name: 'Step 3: Install QEMU'
        run: |
          sudo apt-get update
          sudo apt-get install -yy qemu-system-i386
      - name: 'Step 4: Download artifact: ${{ env.VERSION }}-exe-artifact'
        uses: actions/download-artifact@v2
        with:
          name: '${{ env.VERSION }}-exe-artifact'
      - name: 'Step 5: Test exe on QEMU'
        run: timeout 5 ./ci/ci-test-exe-on-qemu.sh || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
  test-image-on-qemu:
    needs: creating-qemu-image
    name: 'CI i386: Check virtual disk image'
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - name: 'Step 1: Checkout Repo'
        uses: actions/checkout@v2.3.5
        with:
          submodules: true
          fetch-depth: 0
      - name: 'Step 2: Make preparations'
        run: |
          ./preparations.sh
          pversion=$(bash ./ci/ci-generate-version.sh --arch ${{ env.RTEMS_ARCH }} --bsp ${{ env.RTEMS_BSP }} --branch ${{ github.head_ref }})
          echo ${pversion}
          echo "::set-env name=VERSION::$pversion"
      - name: 'Step 3: Install QEMU'
        run: |
          sudo apt-get update
          sudo apt-get install -yy qemu-system-i386
      - name: 'Step 4: Download artifact: ${{ env.VERSION }}-boot-disk-img-artifact'
        uses: actions/download-artifact@v2
        with:
          name: '${{ env.VERSION }}-boot-disk-img-artifact'
      - name: 'Step 5: Test disk image on QEMU'
        run: timeout 10 ./ci/ci-test-image-on-qemu.sh || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
  build-coreboot:
    name: 'CI i386: Build coreboot'
    runs-on: ubuntu-latest
    steps:
      - name: 'Step 1: Install packages for building'
        run: |
          sudo apt-get update
          sudo apt-get install git build-essential gnat flex bison libncurses5-dev wget zlib1g-dev
      - name: 'Step 2: Clone repo'
        run: |
          git clone https://review.coreboot.org/coreboot .
          git submodule update --init --checkout
          cversion=$(git describe --tag)
          echo ${cversion}
          echo "::set-env name=VERSION::$cversion"
      - name: 'Step 3: Build crossgcc ${{ env.VERSION }}'
        run: make crossgcc-i386 CPUS=${{ steps.cpu-cores.outputs.count }}
      - name: 'Step 4: Build coreboot ${{ env.VERSION }}'
        run: |
          make distclean
          touch .config
          ./util/scripts/config --enable CONFIG_VENDOR_EMULATION
          ./util/scripts/config --enable CONFIG_BOARD_EMULATION_QEMU_X86_Q35
          make olddefconfig
          make
          cp build/coreboot.rom ${{ env.VERSION }}-x86-p35-coreboot.rom
      - name: 'Step 5: Upload artifact: ${{ env.VERSION }}-x86-p35-coreboot-artifact'
        uses: actions/upload-artifact@v2
        with:
          name: 'x86-p35-coreboot-test-artifact'
          path: ${{ env.VERSION }}-x86-p35-coreboot.rom
  test-image-with-coreboot-on-qemu:
    needs: [build-coreboot, creating-qemu-image]
    name: 'CI i386: Run coreboot with RTEMS disk image on QEMU'
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - name: 'Step 1: Checkout Repo'
        uses: actions/checkout@v2.3.5
        with:
          submodules: true
          fetch-depth: 0
      - name: 'Step 2: Make preparations'
        run: |
          ./preparations.sh
          pversion=$(bash ./ci/ci-generate-version.sh --arch ${{ env.RTEMS_ARCH }} --bsp ${{ env.RTEMS_BSP }} --branch ${{ github.head_ref }})
          echo ${pversion}
          echo "::set-env name=VERSION::$pversion"
      - name: 'Step 3: Install QEMU'
        run: |
          sudo apt-get update
          sudo apt-get install -yy qemu-system-i386
      - name: 'Step 4: Download artifact: ${{ env.VERSION }}-boot-disk-img-artifact'
        uses: actions/download-artifact@v2
        with:
          name: '${{ env.VERSION }}-boot-disk-img-artifact'
      - name: 'Step 5: Download x86-p35-coreboot-test-artifact'
        uses: actions/download-artifact@v2
        with:
          name: 'x86-p35-coreboot-test-artifact'
      - name: 'Step 6: Get coreboot version'
        run: |
          cversion=$(basename *.rom -x86-p35-coreboot.rom)
          echo ${cversion}
          echo "::set-env name=VERSION::$pversion"
      - name: 'Step 7: Run on QEMU: coreboot ${{ env.VERSION }}'
        run: timeout 10 ./ci/ci-test-image-with-coreboot-on-qemu.sh || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
